package models

import (
	"fmt"
	"sort"
	"time"
)

// SortType –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type SortType int

const (
	SortByCreationOrder SortType = iota // –ü–æ –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è (ID)
	SortByExpiryDate                    // –ü–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
	SortByTrafficTotal                  // –ü–æ –æ–±—â–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
	SortByStatus                        // –ü–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–≤—ã–µ)
	SortByName                          // –ü–æ –∏–º–µ–Ω–∏ (–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π)
)

// MemberInfo —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
type MemberInfo struct {
	BaseUsername string   // –ë–∞–∑–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞)
	FullEmails   []string // –í—Å–µ email'—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö inbound'–∞—Ö
	ID           int      // ID –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
	Enable       bool     // –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	ExpiryTime   int64    // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
	TotalUp      int64    // –û–±—â–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
	TotalDown    int64    // –û–±—â–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
	TotalTraffic int64    // –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (Up + Down)
	IsExpired    bool     // –ò—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
}

// GetSortName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
func (st SortType) GetSortName() string {
	switch st {
	case SortByCreationOrder:
		return "üìÖ –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
	case SortByExpiryDate:
		return "‚è∞ –ü–æ –¥–∞—Ç–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è"
	case SortByTrafficTotal:
		return "üìä –ü–æ –æ–±—â–µ–º—É —Ç—Ä–∞—Ñ–∏–∫—É"
	case SortByStatus:
		return "üîÑ –ü–æ —Å—Ç–∞—Ç—É—Å—É"
	case SortByName:
		return "üî§ –ü–æ –∏–º–µ–Ω–∏"
	default:
		return "üìÖ –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
	}
}

// IsExpiredMember –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (m *MemberInfo) IsExpiredMember() bool {
	if m.ExpiryTime == 0 {
		return false // –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π
	}
	return time.Now().UnixMilli() > m.ExpiryTime
}

// GetExpiryStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
func (m *MemberInfo) GetExpiryStatus() string {
	if m.ExpiryTime == 0 {
		return "‚àû –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π"
	}

	if m.IsExpiredMember() {
		return "‚ùå –ò—Å—Ç–µ–∫"
	}

	expiryDate := time.Unix(m.ExpiryTime/1000, 0)
	daysLeft := int(time.Until(expiryDate).Hours() / 24)

	if daysLeft <= 0 {
		return "‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
	} else if daysLeft <= 7 {
		return fmt.Sprintf("‚ö†Ô∏è %d –¥–Ω.", daysLeft)
	}

	return fmt.Sprintf("‚úÖ %d –¥–Ω.", daysLeft)
}

// SortMembers —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
func SortMembers(members []MemberInfo, sortType SortType) {
	sort.Slice(members, func(i, j int) bool {
		switch sortType {
		case SortByCreationOrder:
			return members[i].ID < members[j].ID
		case SortByExpiryDate:
			// –ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
			if members[i].ExpiryTime == 0 && members[j].ExpiryTime == 0 {
				return members[i].BaseUsername < members[j].BaseUsername
			}
			if members[i].ExpiryTime == 0 {
				return false
			}
			if members[j].ExpiryTime == 0 {
				return true
			}
			return members[i].ExpiryTime < members[j].ExpiryTime
		case SortByTrafficTotal:
			return members[i].TotalTraffic > members[j].TotalTraffic // –ü–æ —É–±—ã–≤–∞–Ω–∏—é
		case SortByStatus:
			// –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–≤—ã–µ, –ø–æ—Ç–æ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
			if members[i].Enable != members[j].Enable {
				return members[i].Enable
			}
			return members[i].BaseUsername < members[j].BaseUsername
		case SortByName:
			return members[i].BaseUsername < members[j].BaseUsername
		default:
			return members[i].ID < members[j].ID
		}
	})
}
